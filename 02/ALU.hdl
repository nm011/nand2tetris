// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16,]  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    
    // zx, nx
    Mux16 (a=x, b[0..15]=false, sel=zx, out=x1);
    Not16 (in=x1, out=notx1);
    Mux16 (a=x1, b=notx1, sel=nx, out=x2);  
    
    // zy,ny
    Mux16 (a=y, b[0..15]=false, sel=zy, out=y1);
    Not16 (in=y1, out=noty1);
    Mux16 (a=y1, b=noty1, sel=ny, out=y2);
    
    // f
    And16 (a=x2, b=y2, out=xandy);
    Add16 (a=x2, b=y2, out=xaddy);
    Mux16 (a=xandy, b=xaddy, sel=f, out=fxy);
    
    // no, out
    Not16 (in=fxy, out=notfxy);
    Mux16 (a=fxy, b=notfxy, sel=no, out=out, out[15]=o1FirstBit, out[0..7]=o1Left, out[8..15]=o1Right);
    
    // zr
    Or8Way (in=o1Left, out=o1LeftOr);
    Or8Way (in=o1Right, out=o1RightOr);
    Or (a=o1LeftOr, b=o1RightOr, out=o2);
    Not (in=o2, out=zr);
    
    // ng
    And (a=o1FirstBit, b=true, out=ng);
}

